package com.mooncell07.cecc.core

data class INSTR(
    val insType: IT,
    val addrMode: AM,
    val regType: RT,
    val flagType: FT,
)

val INSTAB: Array<INSTR?> = arrayOfNulls(256)

fun buildInstructionTable() {
    INSTAB[0x00] = INSTR(IT.BRK, AM.IMPLIED, RT.NONE, FT.NONE)
    INSTAB[0x01] = INSTR(IT.ORQ, AM.X_INDIRECT, RT.A, FT.NONE)
    INSTAB[0x05] = INSTR(IT.ORQ, AM.ZEROPAGE, RT.A, FT.NONE)
    INSTAB[0x06] = INSTR(IT.ASL, AM.ZEROPAGE, RT.NONE, FT.C)
    INSTAB[0x08] = INSTR(IT.PHQ, AM.IMPLIED, RT.SR, FT.NONE)
    INSTAB[0x09] = INSTR(IT.ORQ, AM.IMMEDIATE, RT.A, FT.NONE)
    INSTAB[0x0A] = INSTR(IT.ASL, AM.ZEROPAGE, RT.NONE, FT.C)
    INSTAB[0x0D] = INSTR(IT.ORQ, AM.ABSOLUTE, RT.A, FT.NONE)
    INSTAB[0x0E] = INSTR(IT.ASL, AM.ABSOLUTE, RT.NONE, FT.C)

    INSTAB[0x10] = INSTR(IT.BPL, AM.RELATIVE, RT.NONE, FT.N)
    INSTAB[0x11] = INSTR(IT.ORQ, AM.INDIRECT_Y, RT.A, FT.NONE)
    INSTAB[0x15] = INSTR(IT.ORQ, AM.ZEROPAGE_X, RT.A, FT.NONE)
    INSTAB[0x16] = INSTR(IT.ASL, AM.ZEROPAGE_X, RT.NONE, FT.C)
    INSTAB[0x18] = INSTR(IT.CLQ, AM.IMPLIED, RT.NONE, FT.C)
    INSTAB[0x19] = INSTR(IT.ORQ, AM.ABSOLUTE_Y, RT.A, FT.NONE)
    INSTAB[0x1D] = INSTR(IT.ORQ, AM.ABSOLUTE_X, RT.A, FT.NONE)
    INSTAB[0x1E] = INSTR(IT.ASL, AM.ABSOLUTE_X, RT.NONE, FT.C)

    INSTAB[0x20] = INSTR(IT.JSR, AM.ABSOLUTE, RT.NONE, FT.NONE)
    INSTAB[0x21] = INSTR(IT.AND, AM.X_INDIRECT, RT.A, FT.NONE)
    INSTAB[0x24] = INSTR(IT.BIT, AM.ZEROPAGE, RT.SR, FT.NONE)
    INSTAB[0x25] = INSTR(IT.AND, AM.ZEROPAGE, RT.A, FT.NONE)
    INSTAB[0x26] = INSTR(IT.ROL, AM.ZEROPAGE, RT.NONE, FT.C)
    INSTAB[0x28] = INSTR(IT.PLQ, AM.IMPLIED, RT.SR, FT.NONE)
    INSTAB[0x29] = INSTR(IT.AND, AM.IMMEDIATE, RT.A, FT.NONE)
    INSTAB[0x2A] = INSTR(IT.ROL, AM.ACCUMULATOR, RT.NONE, FT.C)
    INSTAB[0x2C] = INSTR(IT.BIT, AM.ABSOLUTE, RT.SR, FT.NONE)
    INSTAB[0x2D] = INSTR(IT.AND, AM.ABSOLUTE, RT.A, FT.NONE)
    INSTAB[0x2E] = INSTR(IT.ROL, AM.ABSOLUTE, RT.NONE, FT.C)

    INSTAB[0x30] = INSTR(IT.BRQ, AM.RELATIVE, RT.NONE, FT.N)
    INSTAB[0x31] = INSTR(IT.AND, AM.INDIRECT_Y, RT.A, FT.NONE)
    INSTAB[0x35] = INSTR(IT.AND, AM.ZEROPAGE_X, RT.A, FT.NONE)
    INSTAB[0x36] = INSTR(IT.ROL, AM.ZEROPAGE_X, RT.NONE, FT.C)
    INSTAB[0x38] = INSTR(IT.SEQ, AM.IMPLIED, RT.NONE, FT.C)
    INSTAB[0x39] = INSTR(IT.AND, AM.ABSOLUTE_Y, RT.A, FT.NONE)
    INSTAB[0x3D] = INSTR(IT.AND, AM.ABSOLUTE_X, RT.A, FT.NONE)
    INSTAB[0x3E] = INSTR(IT.ROL, AM.ABSOLUTE_X, RT.NONE, FT.C)

    INSTAB[0x40] = INSTR(IT.RTI, AM.IMPLIED, RT.NONE, FT.NONE)
    INSTAB[0x41] = INSTR(IT.EOR, AM.X_INDIRECT, RT.A, FT.NONE)
    INSTAB[0x45] = INSTR(IT.EOR, AM.ZEROPAGE, RT.A, FT.NONE)
    INSTAB[0x46] = INSTR(IT.LSR, AM.ZEROPAGE, RT.NONE, FT.C)
    INSTAB[0x48] = INSTR(IT.PHQ, AM.IMPLIED, RT.A, FT.NONE)
    INSTAB[0x49] = INSTR(IT.EOR, AM.IMMEDIATE, RT.A, FT.NONE)
    INSTAB[0x4A] = INSTR(IT.LSR, AM.ACCUMULATOR, RT.NONE, FT.C)
    INSTAB[0x4C] = INSTR(IT.JMP, AM.ABSOLUTE, RT.NONE, FT.NONE)
    INSTAB[0x4D] = INSTR(IT.EOR, AM.ABSOLUTE, RT.A, FT.NONE)
    INSTAB[0x4E] = INSTR(IT.LSR, AM.ABSOLUTE, RT.NONE, FT.C)

    INSTAB[0x50] = INSTR(IT.BRQ, AM.RELATIVE, RT.NONE, FT.V)
    INSTAB[0x51] = INSTR(IT.EOR, AM.INDIRECT_Y, RT.A, FT.NONE)
    INSTAB[0x55] = INSTR(IT.EOR, AM.ZEROPAGE_X, RT.A, FT.NONE)
    INSTAB[0x56] = INSTR(IT.LSR, AM.ZEROPAGE_X, RT.NONE, FT.C)
    INSTAB[0x58] = INSTR(IT.CLQ, AM.IMPLIED, RT.NONE, FT.I)
    INSTAB[0x59] = INSTR(IT.EOR, AM.ABSOLUTE_Y, RT.A, FT.NONE)
    INSTAB[0x5D] = INSTR(IT.EOR, AM.ABSOLUTE_X, RT.A, FT.NONE)
    INSTAB[0x5E] = INSTR(IT.LSR, AM.ABSOLUTE_X, RT.NONE, FT.C)

    INSTAB[0x60] = INSTR(IT.RTS, AM.IMPLIED, RT.NONE, FT.NONE)
    INSTAB[0x61] = INSTR(IT.ADC, AM.X_INDIRECT, RT.A, FT.C)
    INSTAB[0x65] = INSTR(IT.ADC, AM.ZEROPAGE, RT.A, FT.C)
    INSTAB[0x66] = INSTR(IT.ROR, AM.ZEROPAGE, RT.NONE, FT.C)
    INSTAB[0x68] = INSTR(IT.PLQ, AM.IMPLIED, RT.A, FT.NONE)
    INSTAB[0x69] = INSTR(IT.ADC, AM.IMMEDIATE, RT.A, FT.C)
    INSTAB[0x6A] = INSTR(IT.ROR, AM.ACCUMULATOR, RT.NONE, FT.C)
    INSTAB[0x6C] = INSTR(IT.JMP, AM.INDIRECT, RT.NONE, FT.NONE)
    INSTAB[0x6D] = INSTR(IT.ADC, AM.ABSOLUTE, RT.A, FT.C)
    INSTAB[0x6E] = INSTR(IT.ROR, AM.ABSOLUTE, RT.NONE, FT.C)

    INSTAB[0x70] = INSTR(IT.BRQ, AM.RELATIVE, RT.NONE, FT.V)
    INSTAB[0x71] = INSTR(IT.ADC, AM.INDIRECT_Y, RT.A, FT.C)
    INSTAB[0x75] = INSTR(IT.ADC, AM.ZEROPAGE_X, RT.A, FT.C)
    INSTAB[0x76] = INSTR(IT.ROR, AM.ZEROPAGE_X, RT.NONE, FT.C)
    INSTAB[0x78] = INSTR(IT.SEQ, AM.IMPLIED, RT.NONE, FT.I)
    INSTAB[0x79] = INSTR(IT.ADC, AM.ABSOLUTE_Y, RT.A, FT.C)
    INSTAB[0x7D] = INSTR(IT.ADC, AM.ABSOLUTE_X, RT.A, FT.C)
    INSTAB[0x7E] = INSTR(IT.ROR, AM.ABSOLUTE_X, RT.NONE, FT.C)

    INSTAB[0x81] = INSTR(IT.STQ, AM.X_INDIRECT, RT.X, FT.NONE)
    INSTAB[0x84] = INSTR(IT.STQ, AM.ZEROPAGE, RT.Y, FT.NONE)
    INSTAB[0x85] = INSTR(IT.STQ, AM.ZEROPAGE, RT.A, FT.NONE)
    INSTAB[0x86] = INSTR(IT.STQ, AM.ZEROPAGE, RT.X, FT.NONE)
    INSTAB[0x88] = INSTR(IT.DEQ, AM.IMPLIED, RT.Y, FT.NONE)
    INSTAB[0x8A] = INSTR(IT.TXQ, AM.IMPLIED, RT.A, FT.NONE)
    INSTAB[0x8C] = INSTR(IT.STQ, AM.ABSOLUTE, RT.Y, FT.NONE)
    INSTAB[0x8D] = INSTR(IT.STQ, AM.ABSOLUTE, RT.A, FT.NONE)
    INSTAB[0x8E] = INSTR(IT.STQ, AM.ABSOLUTE, RT.X, FT.NONE)
}
